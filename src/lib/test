    public function register(Request $request)
    {
        // Log the beginning of registration
        Log::info('Registration attempt started', ['request' => $request->all()]);

        // Validate user input
        $validator = Validator::make($request->all(), [
            'name'     => 'required|string|max:255',
            'email'    => 'required|email|unique:users,email',
            'password' => 'required|string|min:6',
            'role'     => 'required|string|exists:roles,name' // ✅ validate role directly from DB
        ]);

        // Handle validation failure
        if ($validator->fails()) {
            Log::error('Validation failed', ['errors' => $validator->errors()->all()]);
            return response()->json([
                'message' => 'Validation failed',
                'errors'  => $validator->errors(),
            ], 422);
        }

        try {
            // Create the user
            $user = User::create([
                'name'     => $request->name,
                'email'    => $request->email,
                'password' => Hash::make($request->password),
            ]);
            Log::info('User created', ['user_id' => $user->id]);

            // Assign the role by name ✅
            $user->assignRole($request->role);
            Log::info('Role assigned successfully', [
                'user_id' => $user->id,
                'role'    => $request->role
            ]);

            // Generate JWT token
            $token = JWTAuth::fromUser($user);
            Log::info('Token generated for user', ['user_id' => $user->id]);

            // Respond with success
            return response()->json([
                'message'        => 'User registered successfully',
                'user'           => $user,
                'token'          => $token,
                'assigned_roles' => $user->getRoleNames(),
            ], 201);
        } catch (\Exception $e) {
            Log::error('Registration failed', [
                'error'   => $e->getMessage(),
                'trace'   => $e->getTraceAsString(),
                'request' => $request->all()
            ]);

            return response()->json([
                'message' => 'Registration failed',
                'error'   => $e->getMessage(),
            ], 500);
        }
    }















    import React from "react";
import {
  TrendingUp,
  ArrowRight,
  Settings,
} from "lucide-react";
import DashboardLayout from "@/components/layout/Dashboard/DashboardLayout";

const InvestormDashboard = () => {
  return (
    <DashboardLayout>
      {/* Main Content */}
      <div className="p-8">
        {/* Header */}
        <div className="flex justify-between items-start mb-8">
          <div>
            <div className="text-sm text-gray-500 mb-1">Investment</div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Invested Plans
            </h1>
            <p className="text-gray-600">
              At a glance summary of your investment.
            </p>
          </div>
          <div className="flex space-x-3">
            <button className="flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">
              <span>Deposit Funds</span>
              <ArrowRight className="w-4 h-4" />
            </button>
            <button className="flex items-center space-x-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
              <span>Invest & Earn</span>
              <ArrowRight className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* Investment Cards */}
        <div className="grid grid-cols-2 gap-6 mb-8">
          {/* Investment Account Card */}
          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-800">
                Investment Account
              </h3>
              <div className="w-6 h-6 text-gray-400">ⓘ</div>
            </div>

            <div className="flex items-center space-x-4 mb-4">
              <div>
                <div className="text-2xl font-bold text-gray-900">
                  0.00 <span className="text-sm font-normal text-gray-500">USD</span>
                </div>
                <div className="text-sm text-gray-500">Available Funds</div>
              </div>
              <div className="text-gray-300">+</div>
              <div>
                <div className="text-2xl font-bold text-gray-900">221.62</div>
                <div className="text-sm text-gray-500">Locked</div>
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <button className="flex items-center space-x-2 px-4 py-2 bg-gray-700 text-white rounded text-sm">
                <span>Transfer Funds</span>
                <ArrowRight className="w-4 h-4" />
              </button>
              <button className="p-2 text-gray-400 hover:text-gray-600">
                <Settings className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Amount Invested Card */}
          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-800">
                Amount Invested
              </h3>
              <div className="w-6 h-6 text-gray-400">ⓘ</div>
            </div>

            <div className="flex items-center space-x-4 mb-6">
              <div>
                <div className="text-2xl font-bold text-gray-900">
                  200.00 <span className="text-sm font-normal text-gray-500">USD</span>
                </div>
                <div className="text-sm text-gray-500">Currently Invested</div>
              </div>
              <div className="text-gray-300">+</div>
              <div>
                <div className="text-2xl font-bold text-gray-900">21.6</div>
                <div className="text-sm text-gray-500">Approx Profit</div>
              </div>
            </div>

            {/* Chart */}
            <div className="h-20 flex items-end space-x-1 mb-4">
              <div className="text-xs text-blue-500 mb-2">
                Investment | Profit
              </div>
              <div className="flex-1">
                <svg className="w-full h-16" viewBox="0 0 300 60">
                  <path
                    d="M0,40 Q50,30 100,35 T200,25 T300,20"
                    fill="none"
                    stroke="#8b5cf6"
                    strokeWidth="2"
                  />
                  <path
                    d="M0,50 Q50,45 100,40 T200,35 T300,30"
                    fill="none"
                    stroke="#3b82f6"
                    strokeWidth="2"
                  />
                </svg>
              </div>
            </div>

            <div className="flex space-x-4 text-sm">
              <button className="text-blue-500 border-b-2 border-blue-500 pb-1">
                Transactions
              </button>
              <button className="text-gray-400 hover:text-gray-600">
                History
              </button>
            </div>
          </div>
        </div>

        {/* Active Plans */}
        <div>
          <h2 className="text-xl font-semibold text-gray-900 mb-6">
            Active Plan (2)
          </h2>

          <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
            {/* Plan 1 */}
            <div className="p-6 border-b border-gray-100">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                    <TrendingUp className="w-5 h-5 text-blue-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">
                      Mercury - Hourly 0.45% for 1 Day
                    </h3>
                    <p className="text-sm text-gray-500">Invested: 100.00 USD</p>
                  </div>
                </div>

                <div className="flex items-center space-x-8 text-sm">
                  <div>
                    <div className="text-gray-500">Start Date</div>
                    <div className="font-medium">Sep 10, 2025 05:27 PM</div>
                  </div>
                  <ArrowRight className="w-4 h-4 text-gray-400" />
                  <div>
                    <div className="text-gray-500">End Date</div>
                    <div className="font-medium">Sep 11, 2025 05:28 PM</div>
                  </div>
                  <div>
                    <div className="text-gray-500">Total Return</div>
                    <div className="font-medium">110.8 USD</div>
                  </div>
                  <div>
                    <div className="text-gray-500">Net Profit</div>
                    <div className="font-medium text-green-600">10.8 USD</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Plan 2 */}
            <div className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                    <TrendingUp className="w-5 h-5 text-blue-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900">
                      Mercury - Hourly 0.45% for 1 Day
                    </h3>
                    <p className="text-sm text-gray-500">Invested: 100.00 USD</p>
                  </div>
                </div>

                <div className="flex items-center space-x-8 text-sm">
                  <div>
                    <div className="text-gray-500">Start Date</div>
                    <div className="font-medium">Sep 05, 2025 06:37 PM</div>
                  </div>
                  <ArrowRight className="w-4 h-4 text-gray-400" />
                  <div>
                    <div className="text-gray-500">End Date</div>
                    <div className="font-medium">Sep 06, 2025 06:38 PM</div>
                  </div>
                  <div>
                    <div className="text-gray-500">Total Return</div>
                    <div className="font-medium">110.8 USD</div>
                  </div>
                  <div>
                    <div className="text-gray-500">Net Profit</div>
                    <div className="font-medium text-green-600">10.8 USD</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Top Currency Ticker */}
        {/* <div className="fixed top-0 left-0 right-0 bg-gray-100 border-b border-gray-200 px-4 py-2 text-xs text-gray-600 z-10">
          <div className="flex space-x-6 overflow-x-auto">
            <span>CAD = 1.384</span>
            <span>USD/AUD = 1.502</span>
            <span>USD/TRY = 41.3</span>
            <span>USD/RUB = 73.4</span>
            <span>USD/INR = 83.27</span>
            <span>USD/BRL = 5.393</span>
            <span>USD/BTC = 0.00000874</span>
            <span>USD/ETH = ...</span>
          </div>
        </div> */}
      </div>
    </DashboardLayout>
  );
};

export default InvestormDashboard;




      if (response.success) {
        if (response.user && response.token) {
          login({ user: response.user, token: response.token });
        } else {
          updateUser({ kyc_status: 'pending' });
        }
        router.push("/verifyAccount/pending");
      }











      <!-- user details layout -->
       "use client";

import React, { useState } from 'react';
import { User } from '@/components/types/user';
import UserProfileCard from '@/components/admin/UserProfileCard/UserProfileCard';
import PersonalTab from '@/components/admin/PersonalTab/PersonalTab';
import TransactionsTab from '@/components/admin/TransactionsTab/TransactionsTab';
import InvestmentsTab from '@/components/admin/InvestmentsTab/InvestmentsTab';
import ReferralsTab from '@/components/admin/ReferralsTab/ReferralsTab';
import ActivitiesTab from '@/components/admin/ActivitiesTab/ActivitiesTab';
import styles from './UserDetailsLayout.module.css';

type Tab = 'personal' | 'transactions' | 'investments' | 'referrals' | 'activities';

interface UserDetailsLayoutProps {
  user: User;
}

export default function UserDetailsLayout({ user }: UserDetailsLayoutProps) {
  const [activeTab, setActiveTab] = useState<Tab>('personal');

  const tabs: { id: Tab; label: string; component: React.ReactNode }[] = [
    { id: 'personal', label: 'Personal', component: <PersonalTab user={user} /> },
    { id: 'transactions', label: 'Transactions', component: <TransactionsTab /> },
    { id: 'investments', label: 'Investments', component: <InvestmentsTab /> },
    { id: 'referrals', label: 'Referrals', component: <ReferralsTab /> },
    { id: 'activities', label: 'Activities', component: <ActivitiesTab /> },
  ];

  return (
    <div className={styles.container}>
      <div className={styles.mainContent}>
        <div className={styles.tabNav}>
          {tabs.map(tab => (
            <button
              key={tab.id}
              className={`${styles.tabButton} ${activeTab === tab.id ? styles.activeTab : ''}`}
              onClick={() => setActiveTab(tab.id)}
            >
              {tab.label}
            </button>
          ))}
        </div>
        <div className={styles.tabContent}>
          {tabs.find(tab => tab.id === activeTab)?.component}
        </div>
      </div>
      <aside className={styles.sidebar}>
        <UserProfileCard user={user} />
      </aside>
    </div>
  );
}


<!-- userprofilecard -->
import React from 'react';
import { User } from '@/components/types/user';
import styles from './UserProfileCard.module.css';
import { Mail, Phone, ShieldCheck, ShieldOff, KeyRound, UserX, Send } from 'lucide-react';

interface UserProfileCardProps {
  user: User;
}

const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-NG', { style: 'currency', currency: 'NGN' }).format(amount);
};

export default function UserProfileCard({ user }: UserProfileCardProps) {
  return (
    <div className={styles.card}>
      <div className={styles.profileHeader}>
        <div className={styles.avatar}>{user.name.charAt(0)}</div>
        <h2 className={styles.userName}>{user.fullName || user.name}</h2>
        <p className={styles.userRole}>
          Status: <span className={`${styles.status} ${styles[user.status]}`}>{user.status}</span>
        </p>
      </div>

      <div className={styles.contactInfo}>
        <div className={styles.contactItem}>
          <Mail size={16} className={styles.contactIcon} />
          <span>{user.email}</span>
        </div>
        {user.mobile && (
          <div className={styles.contactItem}>
            <Phone size={16} className={styles.contactIcon} />
            <span>{user.mobile}</span>
          </div>
        )}
      </div>

      <div className={styles.balanceSection}>
        <h3 className={styles.sectionTitle}>Account Balances</h3>
        <div className={styles.balanceItem}>
          <span>Main Balance</span>
          <span className={styles.balanceAmount}>{formatCurrency(user.balances?.main ?? 0)}</span>
        </div>
        <div className={styles.balanceItem}>
          <span>Investment Wallet</span>
          <span className={styles.balanceAmount}>{formatCurrency(user.balances?.investment ?? 0)}</span>
        </div>
        <div className={styles.balanceItem}>
          <span>Locked Profit</span>
          <span className={styles.balanceAmount}>{formatCurrency(user.balances?.locked ?? 0)}</span>
        </div>
      </div>

      <div className={styles.actionsSection}>
        <h3 className={styles.sectionTitle}>Quick Actions</h3>
        <div className={styles.actionButtons}>
          <button className={styles.actionButton}>
            <Send size={16} />
            <span>Send Email</span>
          </button>
          {user.isVerified ? (
            <button className={`${styles.actionButton} ${styles.unverifyButton}`}>
              <ShieldOff size={16} />
              <span>Un-verify</span>
            </button>
          ) : (
            <button className={`${styles.actionButton} ${styles.verifyButton}`}>
              <ShieldCheck size={16} />
              <span>Verify Email</span>
            </button>
          )}
          <button className={styles.actionButton}>
            <KeyRound size={16} />
            <span>Reset Pass</span>
          </button>
          <button className={`${styles.actionButton} ${styles.suspendButton}`}>
            <UserX size={16} />
            <span>Suspend</span>
          </button>
        </div>
      </div>
    </div>
  );
}

<!-- personaltab -->
 import React from 'react';
import { User } from '@/components/types/user';
import styles from './PersonalTab.module.css';

interface PersonalTabProps {
  user: User;
}

const DetailItem: React.FC<{ label: string; value: React.ReactNode }> = ({ label, value }) => (
  <div className={styles.detailItem}>
    <dt className={styles.detailLabel}>{label}</dt>
    <dd className={styles.detailValue}>{value || 'N/A'}</dd>
  </div>
);

export default function PersonalTab({ user }: PersonalTabProps) {
  const fullAddress = user.address 
    ? `${user.address.street}, ${user.address.city}, ${user.address.state} ${user.address.zip}, ${user.address.country}`
    : 'N/A';

  return (
    <div className={styles.container}>
      <h3 className={styles.title}>Personal Information</h3>
      <dl className={styles.detailsList}>
        <DetailItem label="Full Name" value={user.fullName} />
        <DetailItem label="Email Address" value={user.email} />
        <DetailItem label="Mobile Number" value={user.mobile} />
        <DetailItem label="Date of Birth" value={user.dob ? new Date(user.dob).toLocaleDateString() : 'N/A'} />
        <DetailItem label="Gender" value={user.gender} />
        <DetailItem label="Address" value={fullAddress} />
        <DetailItem label="Date Joined" value={new Date(user.joinDate).toLocaleString()} />
        <DetailItem label="Registration Method" value={user.registrationMethod} />
        <DetailItem label="Last Login" value={user.lastLogin ? new Date(user.lastLogin).toLocaleString() : 'Never'} />
        <DetailItem label="Email Verified" value={user.isVerified ? 'Yes' : 'No'} />
      </dl>
    </div>
  );
}

<!-- user[id] page.isx -->
 import React from 'react';
import UserDetailsLayout from '@/components/admin/UserDetails/UserDetailsLayout';
import { User } from '@/components/types/user';
import styles from './styles.module.css';
import Link from 'next/link';
import { ChevronLeft } from 'lucide-react';

// Mock data - in a real app, this would be fetched based on the `id` param
const mockUser: User = {
  id: '17683',
  name: 'Sylvanus Odi',
  fullName: 'Sylvanus Odi',
  email: 'sylvanus@example.com',
  status: 'active',
  joinDate: '2023-10-26',
  lastLogin: '2024-05-20T10:00:00Z',
  mobile: '+1 234 567 890',
  dob: '1990-01-15',
  gender: 'Male',
  address: {
    street: '123 Main St',
    city: 'Anytown',
    state: 'Anystate',
    zip: '12345',
    country: 'USA',
  },
  registrationMethod: 'Email',
  balances: {
    main: 50000,
    investment: 150000,
    locked: 25000,
  },
  isVerified: true,
};

export default function UserDetailsPage({ params }: { params: { id: string } }) {
  // Here you would fetch the user by params.id
  const user = mockUser;

  return (
    <>
      <div className={styles.container}>
        <div className={styles.header}>
          <div>
            <Link href="/admin/users" className={styles.backLink}>
              <ChevronLeft size={20} />
              <span>Back to Users</span>
            </Link>
            <h1 className={styles.title}>User Details</h1>
            <p className={styles.subtitle}>Detailed information for {user.name}.</p>
          </div>
        </div>
        <UserDetailsLayout user={user} />
      </div>
    </>
  );
}
